rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /articles/{document=**} {
      allow read;
      allow create: if isLoggedIn(); 
      allow update: if isLoggedIn() 
      allow delete: if isLoggedIn();
    }

    match /community/{document=**} {
      allow read;
      allow create: if isLoggedIn(); 
      allow update: if isLoggedIn() 
      allow delete: if isLoggedIn();
    }

    match /matches/{document=**} {
      allow read;
      allow create: if isLoggedIn(); 
      allow update: if isLoggedIn() 
      allow delete: if isLoggedIn();
    }

    match /members/{document=**} {
      allow read;
      allow create: if isLoggedIn(); 
      allow update: if isLoggedIn() 
      allow delete: if isLoggedIn();
    }

    match /questions/{document=**} {
      allow read;
      allow create: if isLoggedIn(); 
      allow update: if isLoggedIn() 
      allow delete: if isLoggedIn();
    }
    
    match /users/{userId} {
      allow read;
      allow create: if isValidUser(userId);
    }
    
    match /usernames/{username} {
      allow read;
      allow update: if isValidUsername(username);
      allow create: if isValidUsername(username);
    }

    match /messages/{document=**} {
      allow read: if isLoggedIn(); 
      allow create;
      allow delete: if isLoggedIn();
    }


    // Users

    function isValidUser(userId) {
      let isOwner = request.auth.uid == userId;
      let username = request.resource.data.username;
      let createdValidUsername = existsAfter(/databases/$(database)/documents/usernames/$(username));
      
      return isOwner && createdValidUsername;
    }
    
    function isValidUsername(username) {
      let isOwner = request.auth.uid == request.resource.data.uid;
      let isValidLength = username.size() >= 3 && username.size() <= 30;
      
      return isOwner && isValidLength;     
    }

    // Utility
    
    function isLoggedIn() {
      let isLoggedIn = request.auth != null;

      return isLoggedIn;
    }      
  }
}